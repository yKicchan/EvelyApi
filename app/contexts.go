// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "EvelyApi": Application Contexts
//
// Command:
// $ goagen
// --design=EvelyApi/design
// --out=$(GOPATH)/src/EvelyApi
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// SendMailAuthContext provides the auth send_mail action context.
type SendMailAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EmailPayload
}

// NewSendMailAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller send_mail action.
func NewSendMailAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*SendMailAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SendMailAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SendMailAuthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SendMailAuthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SigninAuthContext provides the auth signin action context.
type SigninAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginPayload
}

// NewSigninAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller signin action.
func NewSigninAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*SigninAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SigninAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SigninAuthContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SigninAuthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SignupAuthContext provides the auth signup action context.
type SignupAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserPayload
}

// NewSignupAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller signup action.
func NewSignupAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*SignupAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SignupAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SignupAuthContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SignupAuthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// VerifyTokenAuthContext provides the auth verify_token action context.
type VerifyTokenAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Token string
}

// NewVerifyTokenAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller verify_token action.
func NewVerifyTokenAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*VerifyTokenAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VerifyTokenAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramToken := req.Params["token"]
	if len(paramToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("token"))
	} else {
		rawToken := paramToken[0]
		rctx.Token = rawToken
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VerifyTokenAuthContext) OK(r *Email) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.email+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VerifyTokenAuthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VerifyTokenAuthContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// CreateEventsContext provides the events create action context.
type CreateEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EventPayload
}

// NewCreateEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller create action.
func NewCreateEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateEventsContext) Created(r *Event) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// CreatedFull sends a HTTP response with status code 201.
func (ctx *CreateEventsContext) CreatedFull(r *EventFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// CreatedTiny sends a HTTP response with status code 201.
func (ctx *CreateEventsContext) CreatedTiny(r *EventTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateEventsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// DeleteEventsContext provides the events delete action context.
type DeleteEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EventID string
}

// NewDeleteEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller delete action.
func NewDeleteEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEventID := req.Params["event_id"]
	if len(paramEventID) > 0 {
		rawEventID := paramEventID[0]
		rctx.EventID = rawEventID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteEventsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteEventsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteEventsContext) Forbidden(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteEventsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ListEventsContext provides the events list action context.
type ListEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Keyword string
	Limit   int
	Offset  int
}

// NewListEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller list action.
func NewListEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramKeyword := req.Params["keyword"]
	if len(paramKeyword) == 0 {
		rctx.Keyword = ""
	} else {
		rawKeyword := paramKeyword[0]
		rctx.Keyword = rawKeyword
		if utf8.RuneCountInString(rctx.Keyword) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`keyword`, rctx.Keyword, utf8.RuneCountInString(rctx.Keyword), 50, false))
		}
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 10
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 5, true))
		}
		if rctx.Limit > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 50, false))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
		if rctx.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`offset`, rctx.Offset, 0, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEventsContext) OK(r EventCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ListEventsContext) OKFull(r EventFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListEventsContext) OKTiny(r EventTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEventsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ModifyEventsContext provides the events modify action context.
type ModifyEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EventID string
	Payload *EventPayload
}

// NewModifyEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller modify action.
func NewModifyEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ModifyEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ModifyEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEventID := req.Params["event_id"]
	if len(paramEventID) > 0 {
		rawEventID := paramEventID[0]
		rctx.EventID = rawEventID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ModifyEventsContext) OK(r *Event) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ModifyEventsContext) OKFull(r *EventFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ModifyEventsContext) OKTiny(r *EventTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ModifyEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ModifyEventsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ModifyEventsContext) Forbidden(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ModifyEventsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// MyListEventsContext provides the events my_list action context.
type MyListEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit  int
	Offset int
}

// NewMyListEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller my_list action.
func NewMyListEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*MyListEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MyListEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 10
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 50, false))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
		if rctx.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`offset`, rctx.Offset, 0, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MyListEventsContext) OK(r EventCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *MyListEventsContext) OKFull(r EventFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *MyListEventsContext) OKTiny(r EventTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *MyListEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *MyListEventsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NearbyEventsContext provides the events nearby action context.
type NearbyEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Lat    float64
	Limit  int
	Lng    float64
	Offset int
	Range  int
}

// NewNearbyEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller nearby action.
func NewNearbyEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*NearbyEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NearbyEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLat := req.Params["lat"]
	if len(paramLat) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("lat"))
	} else {
		rawLat := paramLat[0]
		if lat, err2 := strconv.ParseFloat(rawLat, 64); err2 == nil {
			rctx.Lat = lat
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lat", rawLat, "number"))
		}
		if rctx.Lat < -90.000000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`lat`, rctx.Lat, -90.000000, true))
		}
		if rctx.Lat > 90.000000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`lat`, rctx.Lat, 90.000000, false))
		}
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 3
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 50, false))
		}
	}
	paramLng := req.Params["lng"]
	if len(paramLng) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("lng"))
	} else {
		rawLng := paramLng[0]
		if lng, err2 := strconv.ParseFloat(rawLng, 64); err2 == nil {
			rctx.Lng = lng
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lng", rawLng, "number"))
		}
		if rctx.Lng < -180.000000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`lng`, rctx.Lng, -180.000000, true))
		}
		if rctx.Lng > 180.000000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`lng`, rctx.Lng, 180.000000, false))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
		if rctx.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`offset`, rctx.Offset, 0, true))
		}
	}
	paramRange := req.Params["range"]
	if len(paramRange) == 0 {
		rctx.Range = 500
	} else {
		rawRange := paramRange[0]
		if range_, err2 := strconv.Atoi(rawRange); err2 == nil {
			rctx.Range = range_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("range", rawRange, "integer"))
		}
		if rctx.Range < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 10, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NearbyEventsContext) OK(r EventCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *NearbyEventsContext) OKFull(r EventFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *NearbyEventsContext) OKTiny(r EventTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *NearbyEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotifyByInstanceIDEventsContext provides the events notify_by_instance_id action context.
type NotifyByInstanceIDEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *NotifyByInstanceIDPayload
}

// NewNotifyByInstanceIDEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller notify_by_instance_id action.
func NewNotifyByInstanceIDEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*NotifyByInstanceIDEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NotifyByInstanceIDEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NotifyByInstanceIDEventsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *NotifyByInstanceIDEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotifyByUserIDEventsContext provides the events notify_by_user_id action context.
type NotifyByUserIDEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *NotifyByUserIDPayload
}

// NewNotifyByUserIDEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller notify_by_user_id action.
func NewNotifyByUserIDEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*NotifyByUserIDEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NotifyByUserIDEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NotifyByUserIDEventsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *NotifyByUserIDEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *NotifyByUserIDEventsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *NotifyByUserIDEventsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// PinEventsContext provides the events pin action context.
type PinEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit  int
	Offset int
	UserID string
}

// NewPinEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller pin action.
func NewPinEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*PinEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PinEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 10
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 50, false))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
		if rctx.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`offset`, rctx.Offset, 0, true))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PinEventsContext) OK(r EventCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *PinEventsContext) OKFull(r EventFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *PinEventsContext) OKTiny(r EventTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PinEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowEventsContext provides the events show action context.
type ShowEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ids []string
}

// NewShowEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller show action.
func NewShowEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIds := req.Params["ids"]
	if len(paramIds) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("ids"))
	} else {
		params := paramIds
		rctx.Ids = params
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEventsContext) OK(r EventCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowEventsContext) OKFull(r EventFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowEventsContext) OKTiny(r EventTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	}
	if r == nil {
		r = EventTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEventsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowEventsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// UpdateEventsContext provides the events update action context.
type UpdateEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUpdateEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the events controller update action.
func NewUpdateEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateEventsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// UploadFilesContext provides the files upload action context.
type UploadFilesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUploadFilesContext parses the incoming request URL and body, performs validations and creates the
// context used by the files controller upload action.
func NewUploadFilesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UploadFilesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UploadFilesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UploadFilesContext) OK(r []string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UploadFilesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// OffPinsContext provides the pins off action context.
type OffPinsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PinPayload
}

// NewOffPinsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pins controller off action.
func NewOffPinsContext(ctx context.Context, r *http.Request, service *goa.Service) (*OffPinsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := OffPinsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *OffPinsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *OffPinsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *OffPinsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// OnPinsContext provides the pins on action context.
type OnPinsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PinPayload
}

// NewOnPinsContext parses the incoming request URL and body, performs validations and creates the
// context used by the pins controller on action.
func NewOnPinsContext(ctx context.Context, r *http.Request, service *goa.Service) (*OnPinsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := OnPinsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *OnPinsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *OnPinsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *OnPinsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// CreateReviewsContext provides the reviews create action context.
type CreateReviewsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EventID string
	Payload *ReviewPayload
}

// NewCreateReviewsContext parses the incoming request URL and body, performs validations and creates the
// context used by the reviews controller create action.
func NewCreateReviewsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateReviewsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateReviewsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEventID := req.Params["event_id"]
	if len(paramEventID) > 0 {
		rawEventID := paramEventID[0]
		rctx.EventID = rawEventID
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateReviewsContext) Created(r *Review) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.review+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateReviewsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateReviewsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ListReviewsContext provides the reviews list action context.
type ListReviewsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EventID string
	Limit   int
	Offset  int
}

// NewListReviewsContext parses the incoming request URL and body, performs validations and creates the
// context used by the reviews controller list action.
func NewListReviewsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListReviewsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListReviewsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEventID := req.Params["event_id"]
	if len(paramEventID) > 0 {
		rawEventID := paramEventID[0]
		rctx.EventID = rawEventID
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 5
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 50, false))
		}
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) == 0 {
		rctx.Offset = 0
	} else {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			rctx.Offset = offset
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
		if rctx.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`offset`, rctx.Offset, 0, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListReviewsContext) OK(r ReviewCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.review+json; type=collection")
	}
	if r == nil {
		r = ReviewCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListReviewsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListReviewsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ShowUsersContext provides the users show action context.
type ShowUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewShowUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show action.
func NewShowUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OKTiny(r *UserTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUsersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUsersContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}
