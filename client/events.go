// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "EvelyApi": events Resource Client
//
// Command:
// $ goagen
// --design=EvelyApi/design
// --out=$(GOPATH)/src/EvelyApi
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateEventsPath computes a request path to the create action of events.
func CreateEventsPath() string {

	return fmt.Sprintf("/api/develop/v2/events")
}

// イベント作成
func (c *Client) CreateEvents(ctx context.Context, path string, payload *EventPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateEventsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateEventsRequest create the request corresponding to the create action endpoint of the events resource.
func (c *Client) NewCreateEventsRequest(ctx context.Context, path string, payload *EventPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteEventsPath computes a request path to the delete action of events.
func DeleteEventsPath(userID string, eventID string) string {
	param0 := userID
	param1 := eventID

	return fmt.Sprintf("/api/develop/v2/events/%s/%s", param0, param1)
}

// イベント削除
func (c *Client) DeleteEvents(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteEventsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteEventsRequest create the request corresponding to the delete action endpoint of the events resource.
func (c *Client) NewDeleteEventsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListEventsPath computes a request path to the list action of events.
func ListEventsPath() string {

	return fmt.Sprintf("/api/develop/v2/events")
}

// ListEventsPath2 computes a request path to the list action of events.
func ListEventsPath2(userID string) string {
	param0 := userID

	return fmt.Sprintf("/api/develop/v2/events/%s", param0)
}

// イベント複数取得
func (c *Client) ListEvents(ctx context.Context, path string, limit int, offset int, keyword *string) (*http.Response, error) {
	req, err := c.NewListEventsRequest(ctx, path, limit, offset, keyword)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEventsRequest create the request corresponding to the list action endpoint of the events resource.
func (c *Client) NewListEventsRequest(ctx context.Context, path string, limit int, offset int, keyword *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp19 := strconv.Itoa(limit)
	values.Set("limit", tmp19)
	tmp20 := strconv.Itoa(offset)
	values.Set("offset", tmp20)
	if keyword != nil {
		values.Set("keyword", *keyword)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ModifyEventsPath computes a request path to the modify action of events.
func ModifyEventsPath(userID string, eventID string) string {
	param0 := userID
	param1 := eventID

	return fmt.Sprintf("/api/develop/v2/events/%s/%s", param0, param1)
}

// イベント編集
func (c *Client) ModifyEvents(ctx context.Context, path string, payload *EventPayload, contentType string) (*http.Response, error) {
	req, err := c.NewModifyEventsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewModifyEventsRequest create the request corresponding to the modify action endpoint of the events resource.
func (c *Client) NewModifyEventsRequest(ctx context.Context, path string, payload *EventPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// NearbyEventsPath computes a request path to the nearby action of events.
func NearbyEventsPath() string {

	return fmt.Sprintf("/api/develop/v2/events/nearby")
}

// 近くのイベントを検索する
func (c *Client) NearbyEvents(ctx context.Context, path string, lat float64, limit int, lng float64, offset int, range_ *int) (*http.Response, error) {
	req, err := c.NewNearbyEventsRequest(ctx, path, lat, limit, lng, offset, range_)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewNearbyEventsRequest create the request corresponding to the nearby action endpoint of the events resource.
func (c *Client) NewNearbyEventsRequest(ctx context.Context, path string, lat float64, limit int, lng float64, offset int, range_ *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp21 := strconv.FormatFloat(lat, 'f', -1, 64)
	values.Set("lat", tmp21)
	tmp22 := strconv.Itoa(limit)
	values.Set("limit", tmp22)
	tmp23 := strconv.FormatFloat(lng, 'f', -1, 64)
	values.Set("lng", tmp23)
	tmp24 := strconv.Itoa(offset)
	values.Set("offset", tmp24)
	if range_ != nil {
		tmp25 := strconv.Itoa(*range_)
		values.Set("range", tmp25)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// NotifyEventsPath computes a request path to the notify action of events.
func NotifyEventsPath() string {

	return fmt.Sprintf("/api/develop/v2/events/notice")
}

// 近くにイベントがあれば通知する
func (c *Client) NotifyEvents(ctx context.Context, path string, payload *NoticePayload, contentType string) (*http.Response, error) {
	req, err := c.NewNotifyEventsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewNotifyEventsRequest create the request corresponding to the notify action endpoint of the events resource.
func (c *Client) NewNotifyEventsRequest(ctx context.Context, path string, payload *NoticePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowEventsPath computes a request path to the show action of events.
func ShowEventsPath() string {

	return fmt.Sprintf("/api/develop/v2/events/detail")
}

// イベント情報取得
func (c *Client) ShowEvents(ctx context.Context, path string, ids []string) (*http.Response, error) {
	req, err := c.NewShowEventsRequest(ctx, path, ids)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEventsRequest create the request corresponding to the show action endpoint of the events resource.
func (c *Client) NewShowEventsRequest(ctx context.Context, path string, ids []string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	for _, p := range ids {
		tmp26 := p
		values.Add("ids", tmp26)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateEventsPath computes a request path to the update action of events.
func UpdateEventsPath() string {

	return fmt.Sprintf("/api/develop/v2/events/update")
}

// イベントの開催フラグを更新する
func (c *Client) UpdateEvents(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUpdateEventsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateEventsRequest create the request corresponding to the update action endpoint of the events resource.
func (c *Client) NewUpdateEventsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
